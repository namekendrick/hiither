generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  comments              Comment[]
  commentVotes          CommentVote[]
  domains               Domain[]
  joins                 Join[]
  permissions           Permission[]
  subscription          Subscription?
  twoFactorConfirmation TwoFactorConfirmation?
  oneTimeConfirmation   OneTimeConfirmation?
  views                 View[]
  votes                 Vote[]
}

model Domain {
  id          String       @id @default(cuid())
  name        String
  logo        String?
  ownerId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  owner       User         @relation(fields: [ownerId], references: [id])
  joins       Join[]
  permissions Permission[]

  @@index([ownerId])
}

model Join {
  id        String        @id @default(cuid())
  userId    String
  domainId  String
  panelId   String?
  access    CommunityRole @default(CONTRIBUTOR)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  domain    Domain        @relation(fields: [domainId], references: [id], onDelete: Cascade)
  source    Panel?        @relation(fields: [panelId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, domainId])
  @@index([userId])
  @@index([domainId])
}

model Permission {
  id        String     @id @default(cuid())
  userId    String
  domainId  String
  access    DomainRole @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  panels    Panel[]
  domain    Domain     @relation(fields: [domainId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([domainId])
}

model Panel {
  id           String      @id @default(cuid())
  title        String?
  video        String?
  cover        String?
  content      Json?
  isPublished  Boolean     @default(false)
  isPaid       Boolean     @default(false)
  permissionId String
  visibility   PanelAccess @default(EDIT)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  comments     Comment[]
  images       Image[]
  joins        Join[]
  muxData      MuxData?
  permission   Permission  @relation(fields: [permissionId], references: [id])
  views        View[]
  votes        Vote[]

  @@index([permissionId])
}

model Image {
  id        String   @id @default(cuid())
  url       String   @unique
  panelId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  panel     Panel    @relation(fields: [panelId], references: [id], onDelete: Cascade)

  @@index([panelId])
}

model Comment {
  id        String        @id @default(cuid())
  text      String
  authorId  String
  panelId   String
  replyToId String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  panel     Panel         @relation(fields: [panelId], references: [id], onDelete: Cascade)
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]
}

model CommentVote {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([commentId])
  @@index([userId])
}

model Vote {
  id        String   @id @default(cuid())
  panelId   String
  userId    String
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  panel     Panel    @relation(fields: [panelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([panelId])
  @@index([userId])
}

model View {
  id        String   @id @default(cuid())
  panelId   String
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  panel     Panel    @relation(fields: [panelId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MuxData {
  id         String   @id @default(cuid())
  assetId    String
  playbackId String?
  panelId    String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  panel      Panel    @relation(fields: [panelId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  status                 String?
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserPanelLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OneTimeToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OneTimeConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  FOUNDER
  ADMIN
  USER
}

enum DomainRole {
  OWNER
  ADMIN
  USER
}

enum CommunityRole {
  CONTRIBUTOR
  MODERATOR
}

enum PanelAccess {
  EDIT
  VIEW
  PRIVATE
}

enum VoteType {
  UP
  DOWN
}
